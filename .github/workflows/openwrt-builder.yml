#
# https://github.com/ud3v0id/openwrt-hd2312
#
# File: .github/workflows/builder.yml
# Description: Build Openwrt DVB driver for NERC DTV (
# CY68013A + HDIC HD2312) DTMB/DMB-TH USB adapter using
# GitHub Actions
#
# Copyright (c) 2024 ud3v0id <ppz@tuta.io>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: Openwrt DVB driver Builder

on:
  repository_dispatch:
  workflow_dispatch:

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: v23.05.4
  FEEDS_URL: https://downloads.immortalwrt.org/releases/23.05.4/targets/x86/64/feeds.buildinfo
  CONFIG_URL: https://downloads.immortalwrt.org/releases/23.05.4/targets/x86/64/config.buildinfo
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 --branch $REPO_BRANCH --single-branch --filter=blob:none $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

        git clone --depth 1 --branch main --single-branch --filter=blob:none https://github.com/hanwckf/hd2312 hd2312
        cat /workdir/hd2312/openwrt/dvb-kconfig >> $GITHUB_WORKSPACE/openwrt/target/linux/generic/config-[0-9].[0-9]*
        ln -sf /workdir/hd2312/openwrt/dvb.mk $GITHUB_WORKSPACE/openwrt/package/kernel/linux/modules/dvb.mk
        ln -sf /workdir/hd2312 $GITHUB_WORKSPACE/openwrt/package/hd2312

    - name: Load custom feeds
      run: |
        wget $FEEDS_URL -o openwrt/feeds.conf.default
        DIY_PART1_SCRIPT=scripts/${REPO_URL##*/}-part1.sh
        [ -e $DIY_PART1_SCRIPT ] && {
            chmod +x $DIY_PART1_SCRIPT
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_PART1_SCRIPT $REPO_BRANCH
        }

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        wget $CONFIG_URL -o openwrt/.config
        DIY_PART2_SCRIPT=scripts/${REPO_URL##*/}-part2.sh
        [ -e $DIY_PART2_SCRIPT ] && {
            chmod +x $DIY_PART2_SCRIPT
            cd openwrt
            $GITHUB_WORKSPACE/$DIY_PART2_SCRIPT $REPO_BRANCH
        }

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        make clean
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the modules
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        target=tools/compile toolchain/compile target/linux/compile
        make $target -j$(nproc) || make $target -j1 || make $target -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

      # TODO:fixme
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
        touch release.txt
        [ ${UPLOAD_GOFILE} = true && ${{ steps.gofile.outputs.url }} ] && echo "ðŸ”— [GoFile](${{ steps.gofile.outputs.url }})" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@master
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
